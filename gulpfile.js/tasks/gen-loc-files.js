const
	os       = require( 'os' ),
	fs       = require( 'fs' ),
	process  = require( 'process' ),
	gulp     = require( 'gulp' ),
	Geonames = require( 'geonames.js' );

const writeTmpFile = ( file, obj ) => {

	return fs.writeFileSync( file, JSON.stringify( obj, null, 2 ), 'utf8' );

};

const writeI18nFile = ( title, desc, object ) => {

	const toPHP = ( obj, level ) => {

		level = level || 1;
		const tabs = '\t'.repeat( level );

		let php = [];
		Object.keys( obj ).forEach( key => {

			const item = obj[ key ];

			if ( 'object' === typeof item ) {

				if ( 0 === Object.keys( item ).length ) {
					php.push( `${ tabs }'${ key }' => array(),` );
				} else {
					php.push( `${ tabs }'${ key }' => array(` );
					php = php.concat( toPHP( item, 2 ) );
					php.push( '\t),' );
				}

			} else {

				php.push( `${ tabs }'${ key }' => __( '${ item.replace( /\'/g, '\\\'' ) }', 'lifterlms' ),` );

			}

		} );

		return php;

	};

	const php = toPHP( object ).join( '\n' );

	const str = `<?php
/**
 * ${title}
 *
 * ${desc}
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                                                         *
 * Data provided by GeoNames (https://www.geonames.org/)                   *
 * under the CC4.0 License (https://creativecommons.org/licenses/by/4.0/). *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *                                                                         *
 * Note to contributors                                                    *
 *                                                                         *
 * The data contained within this file is automatically generated. Do not  *
 * modify or submit pull requests on this file directly. If you've located *
 * an issue with any of the data contained within this file please open a  *
 * new issue at https://github.com/gocodebox/lifterlms/issues/new/choose.  *
 *                                                                         *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 *
 * @package LifterLMS/i18n
 *
 * @since 3.37.0
 * @version 3.38.0-beta.1
 */

defined( 'ABSPATH' ) || exit;

return array(
${ php }
);
`;

	return fs.writeFileSync( `${ process.cwd() }/languages/${ title.toLowerCase() }.php`, str, 'utf8' );

};

gulp.task( 'gen-loc-files', function( cb ) {

	const authPath = os.homedir() + '/.llmsauth';
	if ( fs.existsSync( authPath ) ) {
		auth = JSON.parse( fs.readFileSync( authPath, 'utf8' ) );
	}

	if ( ! auth || ! auth.geonames ) {
		console.log( 'No authorization, cannot proceed.' );
		return cb();
	}

	const geonames = new Geonames({
		username: auth.geonames,
		lan: 'en',
		encoding: 'JSON'
	} );

	const
		path = `${process.cwd()}/tmp/`;

	geonames.countryInfo( {} )
		.then( countries => {
			writeTmpFile( `${path}/countries.json`, countries );
			return countries.geonames;
		} )
		.then( countries => {

			const getCountryName = ( country ) => {
				let name = country.countryName;

				switch( country.countryCode ) {

					case 'GB':
						name += ' (UK)';
						break;

					case 'US':
						name += ' (US)';
						break;

				}

				return name;
			};

			let list = {};
			countries.forEach( country => {
				list[ country.countryCode ] = getCountryName( country );
			} );

			writeI18nFile( 'Countries', 'Returns an array of countries and their country codes.', list );

			return countries;

		} )
		.then( countries => {

			(async function loop() {

				let list = {};

				for ( let i = 0; i < countries.length; i++ ) {

					const states = await geonames.children( { geonameId: countries[ i ].geonameId } );
					writeTmpFile( `${ path }/state-${ countries[ i ].countryName }.json`, states );


					const count = states.totalResultsCount ? states.totalResultsCount : 0;
					console.log( `${ countries[ i ].countryName }: ${ count }` );

					let stateList = {};
					if ( count ) {
						states.geonames.forEach( state => {
							const key = state.adminCodes1 && state.adminCodes1.ISO3166_2 ? state.adminCodes1.ISO3166_2 : state.adminCode1;
							stateList[ key ] = state.name;
						} );
					}
					list[ countries[ i ].countryCode ] = stateList;

				}

				writeI18nFile( 'States', 'Returns a multi-demensional array of countries and country states (or provinces / regions) and their respective codes.\nCountries with an empty array have no states.', list );

			} )();

		} )
		.then( cb );

} );
